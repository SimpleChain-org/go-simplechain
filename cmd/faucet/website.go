// Code generated by go-bindata.
// sources:
// faucet.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\xef\x92\xdb\x36\x92\xff\x3c\x7e\x8a\x0e\xcf\x5e\x49\xf1\x90\xd4\xfc\xb1\x77\x4e\x22\x95\x72\xbc\xd9\x3d\x5f\xdd\x25\xa9\xd8\xa9\xbb\xdd\x6c\xea\x0a\x24\x5a\x22\x3c\x20\xc0\x00\xa0\x34\xf2\x94\xde\xfd\x0a\x00\x49\x51\x94\x66\x62\xc7\xbe\xaa\xf3\x87\x31\x09\x34\xba\x1b\xdd\xbf\x46\x77\x43\x4c\xbe\xfa\xcb\x0f\xaf\xdf\xfd\xfd\xc7\xef\xa0\x30\x25\x5f\x3c\x49\xec\x7f\xc0\x89\x58\xa5\x01\x8a\x60\xf1\xe4\x2c\x29\x90\xd0\xc5\x93\xb3\xb3\xa4\x44\x43\x20\x2f\x88\xd2\x68\xd2\xa0\x36\xcb\xf0\x26\xd8\x4f\x14\xc6\x54\x21\xfe\x56\xb3\x75\x1a\xfc\x77\xf8\xf3\xab\xf0\xb5\x2c\x2b\x62\x58\xc6\x31\x80\x5c\x0a\x83\xc2\xa4\xc1\x9b\xef\x52\xa4\x2b\xec\xad\x13\xa4\xc4\x34\x58\x33\xdc\x54\x52\x99\x1e\xe9\x86\x51\x53\xa4\x14\xd7\x2c\xc7\xd0\xbd\x9c\x03\x13\xcc\x30\xc2\x43\x9d\x13\x8e\xe9\x45\xb0\x78\x62\xf9\x18\x66\x38\x2e\xee\xef\xa3\xef\xd1\x6c\xa4\xba\xdd\xed\x66\xf0\xaa\x36\x05\x0a\xc3\x72\x62\x90\xc2\x5f\x49\x9d\xa3\x49\x62\x4f\xe9\x16\x71\x26\x6e\xa1\x50\xb8\x4c\x03\xab\xba\x9e\xc5\x71\x4e\xc5\x7b\x1d\xe5\x5c\xd6\x74\xc9\x89\xc2\x28\x97\x65\x4c\xde\x93\xbb\x98\xb3\x4c\xc7\x66\xc3\x8c\x41\x15\x66\x52\x1a\x6d\x14\xa9\xe2\xab\xe8\x2a\xfa\x73\x9c\x6b\x1d\x77\x63\x51\xc9\x44\x94\x6b\x1d\x80\x42\x9e\x06\xda\x6c\x39\xea\x02\xd1\x04\x10\x2f\xfe\x98\xdc\xa5\x14\x26\x24\x1b\xd4\xb2\xc4\xf8\x3a\xfa\x73\x34\x75\x22\xfb\xc3\x8f\x4b\xb5\x62\x75\xae\x58\x65\x40\xab\xfc\xa3\xe5\xbe\xff\xad\x46\xb5\x8d\xaf\xa2\x8b\xe8\xa2\x79\x71\x72\xde\xeb\x60\x91\xc4\x9e\xe1\xe2\xb3\x78\x87\x42\x9a\x6d\x7c\x19\x5d\x47\x17\x71\x45\xf2\x5b\xb2\x42\xda\x4a\xb2\x53\x51\x3b\xf8\xc5\xe4\x3e\xe4\xc3\xf7\x43\x17\x7e\x09\x61\xa5\x2c\x51\x98\xe8\xbd\x8e\x2f\xa3\x8b\x9b\x68\xda\x0e\x1c\xf3\x77\x02\xac\xd3\xac\xa8\xb3\x68\x8d\xca\x22\x97\x87\x39\x0a\x83\x0a\xee\xed\xe8\x59\xc9\x44\x58\x20\x5b\x15\x66\x06\x17\xd3\xe9\xb3\xf9\xa9\xd1\x75\xe1\x87\x29\xd3\x15\x27\xdb\x19\x2c\x39\xde\xf9\x21\xc2\xd9\x4a\x84\xcc\x60\xa9\x67\xe0\x39\xbb\x89\x9d\x93\x59\x29\xb9\x52\xa8\x75\x23\xac\x92\x9a\x19\x26\xc5\xcc\x22\x8a\x18\xb6\xc6\x53\xb4\xba\x22\xe2\x68\x01\xc9\xb4\xe4\xb5\xc1\x81\x22\x19\x97\xf9\xad\x1f\x73\xd1\xdc\xdf\x44\x2e\xb9\x54\x33\xd8\x14\xac\x59\x06\x4e\x10\x54\x0a\x1b\xf6\x50\x11\x4a\x99\x58\xcd\xe0\x65\xd5\xec\x07\x4a\xa2\x56\x4c\xcc\x60\xba\x5f\x92\xc4\xad\x19\x93\xd8\x1f\x5c\x4f\xce\x92\x4c\xd2\xad\xf3\x21\x65\x6b\xc8\x39\xd1\x3a\x0d\x06\x26\x76\x07\xd2\x01\x81\x3d\x87\x08\x13\xed\xd4\xc1\x9c\x92\x9b\x00\x9c\xa0\x34\xf0\x4a\x84\x99\x34\x46\x96\x33\xb8\xb0\xea\x35\x4b\x06\xfc\x78\xc8\x57\xe1\xc5\x65\x3b\x79\x96\x14\x17\x2d\x13\x83\x77\x26\x74\xfe\xe9\x3c\x13\x2c\x12\xd6\xae\x5d\x12\x58\x92\x30\x23\xa6\x08\x80\x28\x46\xc2\x82\x51\x8a\x22\x0d\x8c\xaa\xd1\xe2\x88\x2d\xa0\x7f\xfc\x3d\x70\xfa\x15\x17\xad\x5e\x31\x65\xeb\x66\x5b\xbd\xc7\xc1\x0e\x1f\xde\xc4\x0d\x34\x0f\x72\xb9\xd4\x68\xc2\xde\x9e\x7a\xc4\x4c\x54\xb5\x09\x57\x4a\xd6\x55\x37\x7f\x96\xb8\x51\x60\x34\x0d\x6a\xc5\x83\xe6\xf8\x77\x8f\x66\x5b\x35\xa6\x08\xba\x8d\x4b\x55\x86\xd6\x13\x4a\xf2\x00\x2a\x4e\x72\x2c\x24\xa7\xa8\xd2\xe0\x47\x8e\x44\x23\xf8\x00\xd9\xca\x5a\xc1\x3f\xde\xbe\x06\x42\xa9\x05\x66\x14\x45\x3d\x91\x0e\xa5\xc7\x4a\x85\x99\x11\x7b\xaa\xb3\x24\xab\x8d\x91\x1d\x61\x66\x04\x64\x46\x84\x14\x97\xa4\xe6\x06\xa8\x92\x15\x95\x1b\x11\x1a\xb9\x5a\xd9\x9c\xe6\xd5\xf5\x8b\x02\xa0\xc4\x90\x66\x2a\x0d\x5a\xda\xd6\x5b\x44\x57\xb2\xaa\xab\xc6\x5f\x7e\x10\xef\x2a\x22\x28\x52\xeb\x5d\xae\x31\x58\xfc\x8d\xad\x11\x4a\x84\x7f\xbc\xfb\xf6\x6c\xe8\xfa\x9c\x28\x34\x61\x9f\xe5\x11\x00\x92\xd8\xab\xe2\x37\x04\xcd\xbf\xa4\xe6\x2d\xa7\x6e\x03\x25\x8a\x1a\x0e\xde\x42\x65\xcf\x8f\x60\x71\x7f\xaf\x88\x58\x21\x3c\x65\xf4\xee\x1c\x9e\x92\x52\xd6\xc2\xc0\x2c\x85\xe8\x95\x7b\xd4\xbb\xdd\x01\x77\x80\x84\xb3\x45\x42\x1e\x83\x31\x48\x91\x73\x96\xdf\xa6\x81\x61\xa8\xd2\xfb\x7b\xcb\x7c\xb7\x9b\xc3\xfd\x3d\x5b\xc2\xd3\xe8\x27\xcc\x49\x65\xf2\x82\xec\x76\x2b\xd5\x3e\x47\x78\x87\x79\x6d\x70\x3c\xb9\xbf\x47\xae\x71\xb7\xd3\x75\x56\x32\x33\x6e\x97\xdb\x71\x41\x77\x3b\xab\x73\xa3\xe7\x6e\x07\xb1\x65\x2a\x28\xde\xc1\xd3\xe8\x47\x54\x4c\x52\x0d\x9e\x3e\x89\xc9\x22\x89\x39\x5b\x34\xeb\x0e\x8d\x14\xd7\x7c\x8f\x96\xd8\xc2\xa5\xc3\xb3\x0b\x0f\xa7\x6a\x5f\xd3\x13\x68\x5f\x85\x9d\xf6\x0d\x1a\x34\x33\x78\x8b\xdb\x34\xb8\xbf\xef\xaf\x6d\x66\x73\xc2\x79\x46\xac\x5d\xfc\xd6\xba\x45\x1f\xd0\xa2\x74\xcd\xb4\x2b\x9d\x16\xad\x06\x7b\xb5\x3f\x32\x7c\x07\x07\x94\x91\xd5\x0c\xae\x2e\x7b\xa7\xd3\xa9\xc8\x7e\x39\x88\xec\xab\x93\xc4\x15\x11\xc8\xc1\xfd\x0d\x75\x49\x78\xfb\xdc\xc4\x4a\x2f\xf4\x86\x8b\x42\x7b\x16\x77\xaa\x75\x67\xfa\x74\x0e\x72\x8d\x6a\xc9\xe5\x66\x06\xa4\x36\x72\x0e\x25\xb9\xeb\xf2\xda\xd5\x74\xda\xd7\xdb\x96\x7c\x24\xe3\xe8\x4e\x11\x85\xbf\xd5\xa8\x8d\xee\xce\x0c\x3f\xe5\xfe\xda\xa3\x83\xa2\xd0\x48\x07\xd6\xb0\x12\xad\x69\x1d\x55\xcf\xf5\x9d\x31\x4f\xea\xbe\x94\xb2\x4b\x15\x7d\x35\x1a\xd6\xbd\xac\x16\x2c\x12\xa3\xf6\x74\x67\x89\xa1\x9f\x74\xd4\x2b\x5b\xca\x3d\x74\xd2\xfb\xf3\xcc\xee\xbd\x42\x54\xbe\x8e\xb0\x90\x05\xf7\x9a\xc4\x86\x7e\x86\x64\x0b\xc2\x8c\x68\xfc\x18\xf1\x2e\xa3\xef\xc5\xbb\xd7\xcf\x95\x5f\x20\x51\x26\x43\x62\x3e\x46\x81\x65\x2d\x68\x6f\xff\x1f\x4c\xf6\xb9\xe2\x6b\xc1\xd6\xa8\x34\x33\xdb\x8f\x95\x8f\x74\xaf\x80\x7f\x3f\x54\x21\x89\x8d\x7a\x1c\x69\xfd\x97\xe3\xd0\xbe\xbf\x8f\xbf\xfe\xc4\xf0\xfe\x3a\xde\xed\xba\x75\x0f\x15\x21\x87\x44\x67\x49\x71\xb5\xf8\x37\xb9\x01\x2a\x51\x83\x29\x98\x06\x5b\x4a\x7c\x93\xc4\xc5\xd5\x11\x69\xb5\x78\x67\x09\xde\xb2\xb2\xe2\x98\x17\x84\x09\x58\xba\x12\x03\x98\x06\x55\x0b\xc1\xc4\x0a\xa4\x00\x53\xe0\x61\x59\x22\xfc\x53\x94\xc4\xd5\x11\x53\xba\x4f\x54\x3c\x2c\xa4\x62\x1f\x6c\x01\xc6\x8f\x14\x3d\x4b\xa8\x19\x44\x5c\x7b\x60\x38\x43\x70\x5c\x9a\x19\x5c\xfb\x03\x63\xe8\xde\xa6\xfc\x3f\xe5\xdb\x96\xa7\x6b\xab\xec\x29\x3c\x83\x2b\x5f\xcb\xf9\xec\x4a\xcd\x09\x4d\xe8\xc0\x0b\x5e\xf8\xcd\x4d\x75\xd7\xe9\xd3\x15\x86\xd3\x8e\x19\xbc\x93\xd0\x1c\x5b\x0e\x32\x1a\xd6\x8c\xc0\x3b\xaf\xdb\x39\x94\xe4\x16\x81\x40\x42\x06\x6d\x62\xa3\xbc\x6b\x32\x98\x6b\x92\x63\xb3\x41\x34\xdf\x58\x64\xa7\x3f\x79\x86\x4c\xac\x9e\x5d\x4e\xbd\x3b\xec\x83\x65\xff\xec\x72\xca\x84\x91\xcf\x2e\xa7\xd3\xbb\xe9\x47\xfe\x7b\x76\x39\x95\xe2\xd9\xe5\xd4\x14\xf8\xec\x72\xfa\xec\xf2\xaa\xef\x48\x3f\xf2\x9d\x29\x50\x61\x5d\x5a\x2a\xd4\x56\x5a\xeb\xdf\x00\x0c\x51\x2b\x34\x69\xf0\x3f\x24\x93\xb5\x99\x65\x9c\x88\xdb\x60\xe1\xd4\xb5\xa9\x18\x36\xcc\x14\xbe\x6a\x6b\xb9\xb4\xa5\x1b\x54\x44\xdb\xa2\xd5\x6a\xec\x10\xd4\x5c\x08\x68\x18\xeb\x5a\x29\x59\x0b\x9b\x32\xc0\xee\xd9\x81\x55\x8c\x0c\x94\xc4\x1a\x66\x12\x25\x99\x8a\x17\xaf\x65\xb5\x0d\x1d\x13\xb7\xfc\xc8\x8c\xba\xae\x2a\xa9\x4c\xd4\x37\x27\xb1\xcd\x00\x47\x1d\xdf\x4c\x5f\xdc\xbc\x7c\x54\x7d\x0d\x3f\xff\xf4\x1f\x6e\x0f\x9d\x86\x24\x93\x6b\x04\x5f\xd8\x66\xf2\x0e\x88\xa0\xb0\x64\x0a\x81\x6c\xc8\xf6\xab\x24\xa6\xd4\x43\xe7\x4b\xa1\x78\x49\x72\xcc\xa4\xbc\xfd\x7f\x09\xe3\xbf\x36\xca\x9d\x43\x55\x67\x9c\xe9\x02\x08\x08\xdc\x40\xa2\x8d\x92\x62\xb5\x70\xa3\xb9\xed\xd3\xdc\x2b\x54\x52\x9b\xc7\xe0\x80\x65\x86\x94\x9e\x00\xc4\x97\xc2\xc3\x66\xb3\x89\x5a\x8b\x3a\x30\x14\xc8\xab\x38\x97\x65\x59\x0b\x66\xb6\xb1\x0f\x2b\x29\xe2\x6f\x18\x4d\x2f\x6f\x2e\x5f\xbe\xbc\xbc\xfe\xd7\x9b\x17\x2f\x2e\x6f\xae\x5f\x3c\x84\x14\xbb\xa9\x2f\x04\x14\x5f\x7b\x7e\x2f\x6d\x4b\xb7\xdb\x0d\x7d\xe7\x70\xd4\x16\x3e\x36\xc1\x51\x5b\xc0\xab\xe0\x0f\x63\xab\x16\x36\x8b\x87\x84\x9f\x4c\xc0\x7f\x00\x5d\x0e\x5e\x8f\x68\xf8\x99\x90\x6b\x61\x65\x11\x24\x6b\x63\x77\xda\x76\xbe\x4c\x8a\x0e\x66\xe7\xa0\x6d\xb6\xda\x42\xbe\x47\xc3\x69\xbc\x3d\xe8\xac\xdf\x85\xdb\xa1\x3b\x3d\xf8\x5c\xa2\x2c\x25\x45\x9b\x1a\x75\xad\x73\xac\xdc\x95\x28\x18\x09\xdf\x6e\x3f\x10\x61\x98\x40\x20\xc6\x90\xfc\x56\x47\xf0\x83\xe0\x5b\xa8\x35\xc2\x52\x2a\xa0\x98\xd5\xab\x95\xcb\xa5\x0a\x2a\xc5\xd6\xc4\x60\x9b\x42\x75\x0f\x2d\x07\x60\x71\x6d\xc2\x30\xb7\xc6\x94\x9f\x48\xe2\x7f\x97\x35\xe4\x44\x80\x51\x24\xbf\xf5\x91\x55\x2b\x65\x23\xab\x42\xbf\xcb\xb6\xb6\x86\x0c\xb9\xdc\x38\x12\x6f\x8f\x25\x43\x4e\xed\x1e\x34\x22\x14\x72\x03\x65\x9d\xbb\x00\x86\x82\xac\xdd\xe6\x36\x84\x19\xa8\x85\x61\xdc\xdb\xd9\xd4\x4a\x40\x2e\x4b\xd4\xa7\xb2\xff\x51\x83\x95\x60\xb9\x78\x57\xe0\x89\xba\xa2\x6b\x8d\x40\xe1\x6b\x4f\x0e\x95\x92\x06\x73\xeb\x70\x20\x2b\xc2\x84\xb6\x1e\x33\x56\x12\x96\x8b\x93\x36\xf1\xc5\xd5\xc1\x58\x6f\xa8\x5f\x88\x35\x0f\xfb\x2b\x40\x57\x9d\xc5\x31\xfc\x8d\xcb\x8c\x70\x58\xdb\x28\xc9\xb8\xad\x9a\x24\x14\xd2\x9a\xa5\x67\x49\x6d\x88\xa9\x35\xc8\xa5\x1b\xf5\xbb\xb1\xeb\xd7\x44\x59\xaf\x63\x59\x19\x48\x9b\x0b\x2c\x3b\xa6\x51\xad\x9b\x6b\x39\xfb\x6a\x5b\xe6\x83\xf9\xce\x23\x29\xfc\xf2\xeb\xfc\x49\xa3\xca\x5f\x70\xe9\x60\x64\x63\xc2\x9b\xc1\x14\xc4\x40\xae\x90\x18\xd4\x90\x73\xa9\x6b\xe5\x35\xb4\x7d\x3f\x58\x2d\x5b\x4e\x2d\x67\x3b\x51\x39\x69\x2d\x93\x71\x41\x74\x31\x69\xee\xdf\x14\x3a\x0f\x76\x73\xed\xf8\x99\x45\xea\xd8\x32\x60\xe9\x74\x0e\x2c\x69\xf9\x46\x1c\xc5\xca\x14\x73\x60\xcf\x9f\x77\xc4\x67\x6c\x09\xe3\x96\xe2\x17\xf6\x6b\x64\xee\x22\x2b\x05\xd2\x14\xfa\xd2\x9c\xc0\x86\x8f\xae\x38\xcb\x71\xcc\xce\xe1\x62\x32\x6f\x67\x33\x85\xe4\xb6\x7d\x6b\xda\x62\xff\x9f\xfb\xbb\x9b\x1f\x5a\xc6\x19\xff\xc0\x36\xbe\xe9\xd6\x40\x60\xc5\xb4\x81\x5a\x71\x68\xe2\xde\xbb\xa0\x73\x88\xa3\xeb\x5b\xe5\x08\xab\xcd\x43\x83\xb3\x76\x0b\xb9\x14\x5a\x72\x8c\xb8\x5c\x8d\xaf\xaf\xae\x27\x6e\xd0\xf3\x8e\x34\x0a\x3a\xfe\xf7\xb7\x3f\x7c\x1f\x69\xa3\x98\x58\xb1\xe5\x76\x7c\x5f\x2b\x3e\x83\xa7\xe3\xe0\x5f\x6a\xc5\x83\xc9\x2f\xd3\x5f\xa3\x35\xe1\x35\x9e\x3b\x10\xcc\xdc\xdf\x23\xd1\xe7\xd0\x3c\xce\xe0\x50\x8b\xdd\x64\x32\x3f\x7d\x6b\xd1\xbb\x64\x51\xa8\xd1\x8c\x2d\x61\x77\xb9\x30\x34\x1c\x81\x12\x4d\x21\x5d\xac\x2b\xcc\xa5\x10\x98\x1b\xa8\x2b\x29\x1a\x3b\x01\x97\x5a\xef\xd1\xd9\x52\xa4\xc7\x48\x69\xe8\x53\x57\x0d\xfc\x17\x66\x6f\x65\x7e\x8b\x66\x3c\x1e\x6f\x98\xa0\x72\x13\x71\xe9\xcf\xec\xc8\x46\xb3\xcc\x25\x87\x34\x4d\xa1\x49\xd3\xc1\x04\xbe\x81\x60\xa3\x6d\xc2\x0e\x60\x66\x1f\xed\xd3\x04\x9e\xc3\x70\x79\x61\x0b\x8a\xe7\x10\xc4\xa4\x62\xc1\xc4\xc7\x48\x6b\x78\x29\x4a\xd4\x9a\xac\xb0\xaf\x20\xae\x51\x98\x0e\x79\x76\x1f\xa5\x5e\x41\x0a\xce\x41\x15\x51\x1a\x3d\x49\x64\x7b\xe3\x16\x82\x16\xc8\x8e\x2c\x4d\x41\xd4\x9c\xef\x91\xeb\x23\x65\xde\x62\xf2\x80\x3c\xf2\x49\xeb\xab\x34\x05\xdb\x2a\x5a\x13\xd3\xfd\x4a\xeb\x7c\xdf\xd2\x4e\x22\x9b\x60\xf6\x2b\x26\xf3\x3e\xc4\x0f\xb8\x21\xfd\x3d\x76\x48\x87\xfc\x90\x3e\xc0\xd0\xdd\x20\x3c\xc6\xcf\xdf\x38\xf4\xd8\xb9\x81\x07\xb8\x89\xba\xcc\x50\x3d\xc6\xce\xdf\x20\x34\xec\x9c\xa9\xdf\x08\xd3\x5b\x7b\x0e\x17\x2f\x27\x0f\x70\x47\xa5\xe4\x83\xcc\x85\x34\xdb\xf1\x3d\x27\x5b\x5b\x94\xc1\xc8\xc8\xea\xb5\x6b\xf9\x47\xe7\x2e\x75\xcf\xa0\xe3\x70\xee\x2e\x72\x67\x30\x72\x6f\x76\x9e\x95\xe8\x56\xbd\x98\x4e\xa7\xe7\xd0\xfe\xd6\xf1\x2d\xb1\x41\xa8\x6a\xdc\x3d\xa0\x8f\xae\xf3\xdc\x16\x10\x9f\xa3\x51\xc3\xa3\xd3\xa9\x79\xff\x0c\xad\xba\x84\x71\xa0\x16\xfc\xe9\x4f\x70\x34\x7b\x08\xe3\x38\x86\xff\x24\xea\x16\xdc\xed\x9e\xc2\x35\x93\xb5\xde\xa7\x9f\x92\x69\x6d\xb3\x31\xd1\x40\xa5\xc0\x66\xcd\xa7\xe5\x82\x23\x1d\x1b\x32\x58\xc0\x74\xa8\xa0\x3d\x0e\x7b\xb9\xe2\x44\x0a\xe9\xf1\x3d\xcc\x0e\xad\x45\x4e\x24\x1f\x56\x22\x7c\x95\x42\x10\xf4\x17\x1f\x51\x58\x82\x8e\xd9\x99\x46\xf3\xce\xfb\x62\xdc\xa4\xcc\x53\x09\x6d\x72\x0e\x57\xd3\xe9\x74\x72\xa4\xc4\x6e\x6f\xde\x57\x95\xad\xb3\x80\x88\xad\x3b\x12\x3b\xdb\xba\x0a\xd4\xd6\x4c\xf6\x48\xe3\x90\x4b\xce\x7d\x71\xd3\x2c\xb5\x06\xb6\xed\x89\x14\x90\x42\x78\x31\x3f\x91\x5a\x7b\x96\xec\x6d\x6d\xe8\x9e\x13\xb6\x1f\xba\xe8\xd0\x66\x03\xe2\xf0\xe2\xc0\x29\x07\xfe\x3a\xed\x98\xb3\x4e\x6f\xb6\xb7\xe8\xc0\x5d\x7b\x7f\x0d\x6d\xd6\xd3\xdf\xf3\x79\x7e\xf1\x91\xdb\xe8\xa6\xab\x5a\x17\xe3\x81\xa2\x93\xf9\xb1\x6f\xde\x18\x54\xb6\xdc\x96\x36\x65\x59\x5f\xd8\x9e\x42\xe1\x91\x4b\x5c\xcd\xaf\x30\x54\x28\x28\xaa\xb6\xce\xf0\x2d\x82\xad\x0a\x0f\x5c\xe6\xdb\xd6\x3e\x9c\x3e\x31\x60\x5c\x9d\x26\x05\x02\x00\x0c\x82\xc0\x01\xf5\x00\xa9\x96\x18\x39\xa9\x34\x52\x48\xc1\xff\xf4\x3c\x9e\x44\xb5\x60\x77\xe3\x49\xd8\xbc\x0f\x79\xb4\xf3\x4d\xda\xf4\x75\x8c\x53\xfb\x79\x0a\x41\x62\x14\x30\x9a\x8e\x02\x78\x7e\x2a\x04\x6d\xd6\x1d\x2d\xf6\x1a\xf4\x97\x02\x24\x86\x2e\xdc\x5d\xa4\x6f\xfc\xfe\x19\x64\x24\xbf\x5d\xb9\x8e\x6a\x66\xeb\xaf\xf1\x11\x5b\xb2\x26\x86\x28\xc7\x75\x32\x87\x3d\x79\xd3\x79\xe6\xd6\x39\x73\xf0\x2d\xae\xbb\xfa\x84\xee\x07\x03\xf7\x96\x49\x45\x51\x85\x8a\x50\x56\xeb\x19\x5c\x57\x77\xf3\x7f\xb6\x3f\xa8\xb8\x4b\xda\x47\x55\xad\x14\x2e\x8e\x34\xca\x73\xf7\x93\xd8\x73\x08\x92\xd8\x12\xfc\x1e\x9b\x6e\xb3\xfd\x9f\xbc\xe1\xc4\x55\x34\x74\x3f\x48\x37\xe3\x25\xa3\x94\xa3\x55\x78\xcf\xde\x06\xa3\xf5\x7f\x3f\xa4\x0e\x45\x42\x73\x07\xbd\x5f\xb3\x03\xe4\x1a\x1f\x59\xd0\x5d\x67\x8f\x2c\x00\x42\xbb\x65\xe6\x6c\xde\x74\xed\x6e\x58\x8d\x9c\x2d\x9a\x0f\x18\x68\xad\x5c\xad\x35\x0e\x1b\x80\x9d\xc3\x48\xdb\xda\x8f\xea\xd1\x24\x2a\xea\x92\x08\xf6\x01\xc7\x36\x2f\x4d\xbc\xad\xdc\xfd\x78\x70\x7c\x24\x1f\x29\xb3\xbf\xac\x1e\xb5\x39\x6e\xd4\x18\x71\xd4\x7a\xf7\x7a\x7f\x49\x30\x83\xe9\x7c\xf4\x89\x16\x3a\x2d\x25\xcc\x88\x82\xfe\x4b\xd8\x26\x5f\x50\xd2\x4a\x6f\xe7\x32\xa2\x46\xfe\x6a\xc4\xd5\xe7\x42\x6e\xd2\xd1\xd5\xb4\x53\xd2\x3b\xda\xf9\x79\xd4\x60\xed\xc8\x19\x56\xcb\x36\x34\x17\x70\x35\xfd\x12\xda\xfa\x6b\x95\xc1\x0e\x8c\x62\x15\x52\x20\xb9\x61\x6b\xfc\x3f\xd8\xc8\x17\x30\xf2\x27\xab\x68\x71\xd8\x1a\xcf\xc1\xf4\x40\x5f\x3b\xdb\xd9\xf6\x6b\x1b\x6f\x10\x3b\x0b\x3f\x87\xe0\xe4\x46\x1e\x44\xe2\x80\x70\x10\xda\x0f\xc7\xbd\xfb\xc1\x27\x18\xe6\x14\x5b\xed\x76\x3f\x55\x4e\xa2\xc2\x94\x7c\x1c\x24\xc6\x7d\x9a\x62\x75\xee\x38\x38\x06\x7e\xf8\xb0\xa4\xdb\x1d\x36\x32\xb6\xa9\xc7\x41\x9f\x05\xbd\xe2\xa4\xeb\xc5\xda\x4a\x04\x76\xfb\x2f\x78\xe2\x18\xde\x1a\xa2\x0c\x10\xf8\xf9\x0d\xd4\x15\x25\xc6\x66\x2f\x09\x36\x3f\xba\x2c\xd6\x7d\xe2\x93\x11\xa5\x61\x29\xd5\x86\x28\xda\x5c\xe8\x98\x02\xb7\x40\x14\x76\xa5\x9f\x46\xf3\xc6\x9e\x62\x6b\xc2\xc7\x47\x7d\xdf\xd3\xf1\x28\xea\xbb\x7c\x34\x89\x90\xe4\xc5\x31\xa1\xcb\x58\x9d\xdc\x14\xbe\x77\x2d\xc0\xf8\xe9\xd8\x14\x4c\x4f\x22\x62\x8c\x1a\x8f\x0e\xc0\x30\x9a\x58\xbf\x5e\xf4\x5a\xb2\x6e\x79\x72\x10\x56\x8f\xf1\xd8\x17\xd3\x5d\x21\xd0\x92\xe7\x5a\x8f\x3d\xae\x46\xe7\x3d\xde\x87\xb0\x1a\x3d\x1b\x75\x8e\xda\x87\xf7\x7e\x1f\xe9\x49\x4d\x0e\x58\x8f\x6c\x94\x8d\x8e\xc4\x13\x4a\x5f\xdb\xf8\x19\x07\x27\x22\x7d\x88\x8e\x49\x67\x6c\x7f\x5e\x3f\x6a\x65\xff\x91\xc4\x03\x26\x66\x74\x34\x89\x74\x9d\xf9\xbb\x89\xf1\x8b\xae\x01\x6b\xc9\x1c\x78\x87\xa9\xe0\xa8\xa0\xb0\x22\x0e\x8b\x8a\x70\x50\x84\x3c\x92\x35\x1a\x91\x7e\x57\xbb\x73\x6b\xf0\xe9\xa4\xbb\xef\xfa\x4e\xdb\xe2\xca\xff\xb6\xb0\xc1\x4c\xbb\x9b\x04\x68\xf0\xee\xae\x78\xfc\x55\xce\xab\x1f\xdf\xf4\xae\x73\xba\x88\x18\x3b\xee\xdd\xd7\x77\xa7\xee\x49\x4e\x7e\xee\xb7\xd9\x6c\xa2\x95\x94\x2b\xee\x3f\xf4\xeb\x2e\x52\x62\x52\xb1\xe8\xbd\x0e\x80\xe8\xad\xc8\x81\xe2\x12\xd5\xa2\xc7\xbe\xb9\x5d\x49\x62\xff\x21\x5a\x12\xfb\x6f\x6d\xff\x37\x00\x00\xff\xff\x21\xca\xd1\x62\x7c\x2b\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": &bintree{faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
