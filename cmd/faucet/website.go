// Code generated by go-bindata.
// sources:
// faucet.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\xef\x92\xdb\x36\x92\xff\x3c\x7e\x8a\x0e\xcf\x5e\x49\x99\x21\xa9\xf9\x63\xef\x9c\x44\x2a\xe5\xf5\x66\xf7\x7c\x75\x97\xa4\x62\xa7\xee\xb6\xb2\xa9\x2b\x90\x68\x89\xf0\x80\x00\x03\x80\xd2\x28\x53\x7a\xf7\x2b\x00\x24\x45\x51\x9a\x89\x1d\xfb\xaa\xce\x1f\xc6\x24\xd0\xe8\x6e\x74\xff\x1a\xdd\x0d\x31\xf9\xea\xaf\xdf\xbf\x79\xff\x8f\x1f\xbe\x85\xc2\x94\x7c\xf1\x2c\xb1\xff\x01\x27\x62\x95\x06\x28\x82\xc5\xb3\xb3\xa4\x40\x42\x17\xcf\xce\xce\x92\x12\x0d\x81\xbc\x20\x4a\xa3\x49\x83\xda\x2c\xc3\xdb\x60\x3f\x51\x18\x53\x85\xf8\x6b\xcd\xd6\x69\xf0\xdf\xe1\x4f\xaf\xc3\x37\xb2\xac\x88\x61\x19\xc7\x00\x72\x29\x0c\x0a\x93\x06\x6f\xbf\x4d\x91\xae\xb0\xb7\x4e\x90\x12\xd3\x60\xcd\x70\x53\x49\x65\x7a\xa4\x1b\x46\x4d\x91\x52\x5c\xb3\x1c\x43\xf7\x72\x01\x4c\x30\xc3\x08\x0f\x75\x4e\x38\xa6\x97\xc1\xe2\x99\xe5\x63\x98\xe1\xb8\x78\x78\x88\xbe\x43\xb3\x91\xea\x6e\xb7\x9b\xc1\xeb\xda\x14\x28\x0c\xcb\x89\x41\x0a\x7f\x23\x75\x8e\x26\x89\x3d\xa5\x5b\xc4\x99\xb8\x83\x42\xe1\x32\x0d\xac\xea\x7a\x16\xc7\x39\x15\x1f\x74\x94\x73\x59\xd3\x25\x27\x0a\xa3\x5c\x96\x31\xf9\x40\xee\x63\xce\x32\x1d\x9b\x0d\x33\x06\x55\x98\x49\x69\xb4\x51\xa4\x8a\xaf\xa3\xeb\xe8\xcf\x71\xae\x75\xdc\x8d\x45\x25\x13\x51\xae\x75\x00\x0a\x79\x1a\x68\xb3\xe5\xa8\x0b\x44\x13\x40\xbc\xf8\x63\x72\x97\x52\x98\x90\x6c\x50\xcb\x12\xe3\x9b\xe8\xcf\xd1\xd4\x89\xec\x0f\x3f\x2d\xd5\x8a\xd5\xb9\x62\x95\x01\xad\xf2\x8f\x96\xfb\xe1\xd7\x1a\xd5\x36\xbe\x8e\x2e\xa3\xcb\xe6\xc5\xc9\xf9\xa0\x83\x45\x12\x7b\x86\x8b\xcf\xe2\x1d\x0a\x69\xb6\xf1\x55\x74\x13\x5d\xc6\x15\xc9\xef\xc8\x0a\x69\x2b\xc9\x4e\x45\xed\xe0\x17\x93\xfb\x98\x0f\x3f\x0c\x5d\xf8\x25\x84\x95\xb2\x44\x61\xa2\x0f\x3a\xbe\x8a\x2e\x6f\xa3\x69\x3b\x70\xcc\xdf\x09\xb0\x4e\xb3\xa2\xce\xa2\x35\x2a\x8b\x5c\x1e\xe6\x28\x0c\x2a\x78\xb0\xa3\x67\x25\x13\x61\x81\x6c\x55\x98\x19\x5c\x4e\xa7\x2f\xe6\xa7\x46\xd7\x85\x1f\xa6\x4c\x57\x9c\x6c\x67\xb0\xe4\x78\xef\x87\x08\x67\x2b\x11\x32\x83\xa5\x9e\x81\xe7\xec\x26\x76\x4e\x66\xa5\xe4\x4a\xa1\xd6\x8d\xb0\x4a\x6a\x66\x98\x14\x33\x8b\x28\x62\xd8\x1a\x4f\xd1\xea\x8a\x88\xa3\x05\x24\xd3\x92\xd7\x06\x07\x8a\x64\x5c\xe6\x77\x7e\xcc\x45\x73\x7f\x13\xb9\xe4\x52\xcd\x60\x53\xb0\x66\x19\x38\x41\x50\x29\x6c\xd8\x43\x45\x28\x65\x62\x35\x83\x57\x55\xb3\x1f\x28\x89\x5a\x31\x31\x83\xe9\x7e\x49\x12\xb7\x66\x4c\x62\x7f\x70\x3d\x3b\x4b\x32\x49\xb7\xce\x87\x94\xad\x21\xe7\x44\xeb\x34\x18\x98\xd8\x1d\x48\x07\x04\xf6\x1c\x22\x4c\xb4\x53\x07\x73\x4a\x6e\x02\x70\x82\xd2\xc0\x2b\x11\x66\xd2\x18\x59\xce\xe0\xd2\xaa\xd7\x2c\x19\xf0\xe3\x21\x5f\x85\x97\x57\xed\xe4\x59\x52\x5c\xb6\x4c\x0c\xde\x9b\xd0\xf9\xa7\xf3\x4c\xb0\x48\x58\xbb\x76\x49\x60\x49\xc2\x8c\x98\x22\x00\xa2\x18\x09\x0b\x46\x29\x8a\x34\x30\xaa\x46\x8b\x23\xb6\x80\xfe\xf1\xf7\xc8\xe9\x57\x5c\xb6\x7a\xc5\x94\xad\x9b\x6d\xf5\x1e\x07\x3b\x7c\x7c\x13\xb7\xd0\x3c\xc8\xe5\x52\xa3\x09\x7b\x7b\xea\x11\x33\x51\xd5\x26\x5c\x29\x59\x57\xdd\xfc\x59\xe2\x46\x81\xd1\x34\xa8\x15\x0f\x9a\xe3\xdf\x3d\x9a\x6d\xd5\x98\x22\xe8\x36\x2e\x55\x19\x5a\x4f\x28\xc9\x03\xa8\x38\xc9\xb1\x90\x9c\xa2\x4a\x83\x1f\x38\x12\x8d\xe0\x03\x64\x2b\x6b\x05\xef\x58\x59\x71\xcc\x0b\xc2\x04\x10\x4a\x2d\x40\xa3\x28\xea\x89\x76\x68\x3d\x56\x2e\xcc\x8c\xd8\x53\x9d\x25\x59\x6d\x8c\xec\x08\x33\x23\x20\x33\x22\xa4\xb8\x24\x35\x37\x40\x95\xac\xa8\xdc\x88\xd0\xc8\xd5\xca\xe6\x36\xaf\xb6\x5f\x14\x00\x25\x86\x34\x53\x69\xd0\xd2\xb6\x5e\x23\xba\x92\x55\x5d\x35\x7e\xf3\x83\x78\x5f\x11\x41\x91\x5a\x2f\x73\x8d\xc1\xe2\xef\x6c\x8d\x50\x22\xbc\xe3\xf9\xd9\x10\x02\x39\x51\x68\xc2\x3e\xcb\x23\x20\x24\xb1\x57\xc5\x6f\x08\x9a\x7f\x49\xcd\x5b\x4e\xdd\x06\x4a\x14\x35\x1c\xbc\x85\xca\x9e\x23\xc1\xe2\xe1\x41\x11\xb1\x42\x78\xce\xe8\xfd\x05\x3c\x27\xa5\xac\x85\x81\x59\x0a\xd1\x6b\xf7\xa8\x77\xbb\x03\xee\x00\x09\x67\x8b\x84\x3c\x05\x67\x90\x22\xe7\x2c\xbf\x4b\x03\xc3\x50\xa5\x0f\x0f\x96\xf9\x6e\x37\x87\x87\x07\xb6\x84\xe7\xd1\x8f\x98\x93\xca\xe4\x05\xd9\xed\x56\xaa\x7d\x8e\xf0\x1e\xf3\xda\xe0\x78\xf2\xf0\x80\x5c\xe3\x6e\xa7\xeb\xac\x64\x66\xdc\x2e\xb7\xe3\x82\xee\x76\x56\xe7\x46\xcf\xdd\x0e\x62\xcb\x54\x50\xbc\x87\xe7\xd1\x0f\xa8\x98\xa4\x1a\x3c\x7d\x12\x93\x45\x12\x73\xb6\x68\xd6\x1d\x1a\x29\xae\xf9\x1e\x2d\xb1\x85\x4b\x87\x6b\x17\x26\x4e\xd5\xbe\xa6\x27\x50\xbf\x0a\x3b\xed\x1b\x34\x68\x66\xf0\x0e\xb7\x69\xf0\xf0\xd0\x5f\xdb\xcc\xe6\x84\xf3\x8c\x58\xbb\xf8\xad\x75\x8b\x7e\x43\x8b\xd2\x35\xd3\xae\x84\x5a\xb4\x1a\xec\xd5\xfe\xc8\x30\x1e\x1c\x54\x46\x56\x33\xb8\xbe\xea\x9d\x52\xa7\x22\xfc\xd5\x20\xc2\xaf\x4f\x12\x57\x44\x20\x07\xf7\x37\xd4\x25\xe1\xed\x73\x13\x2b\xbd\xd0\x1b\x2e\x0a\xed\x99\xdc\xa9\xd6\x9d\xed\xd3\x39\xc8\x35\xaa\x25\x97\x9b\x19\x90\xda\xc8\x39\x94\xe4\xbe\xcb\x6f\xd7\xd3\x69\x5f\x6f\x5b\xfa\x91\x8c\xa3\x3b\x4d\x14\xfe\x5a\xa3\x36\xba\x3b\x3b\xfc\x94\xfb\x6b\x8f\x10\x8a\x42\x23\x1d\x58\xc3\x4a\xb4\xa6\x75\x54\x3d\xd7\x77\xc6\x3c\xa9\xfb\x52\xca\x2e\x65\xf4\xd5\x68\x58\xf7\xb2\x5b\xb0\x48\x8c\xda\xd3\x9d\x25\x86\x7e\xd2\x91\xaf\x6c\x49\xf7\xd8\x89\xef\xcf\x33\xbb\xf7\x0a\x51\xf9\x7a\xc2\x42\x16\xdc\x6b\x12\x1b\xfa\x19\x92\x2d\x08\x33\xa2\xf1\x63\xc4\xbb\xcc\xbe\x17\xef\x5e\x3f\x57\x7e\x81\x44\x99\x0c\x89\xf9\x18\x05\x96\xb5\xa0\xbd\xfd\xbf\xe3\xb9\x86\xcf\x94\x5f\x0b\xb6\x46\xa5\x99\xd9\x7e\xac\x02\x48\xf7\x1a\xf8\xf7\x43\x15\x92\xd8\xa8\xa7\xa1\xd6\x7f\x39\x8e\xed\x87\x87\xf8\xeb\x4f\x8c\xef\xaf\xe3\xdd\xae\x5b\xf7\x58\x35\x72\x48\x74\x96\x14\xd7\x8b\x7f\x93\x1b\xa0\x12\x35\x98\x82\x69\xb0\x35\xc5\x37\x49\x5c\x5c\x1f\x91\x56\x8b\xf7\x96\xa0\x9f\x78\x97\xae\xd6\x00\xa6\x41\xd5\x42\x30\xb1\x02\x29\xc0\x14\x78\x58\x9f\x08\xff\x14\x25\x71\x75\xc4\x94\xee\x33\x15\x0f\x0b\xa9\xd8\x6f\xb6\x12\xe3\x47\x8a\x9e\x25\xd4\x0c\x42\xae\x3d\x31\x9c\x21\x38\x2e\xcd\x0c\x6e\xfc\x89\x31\x74\x6f\xd3\x07\x9c\xf2\x6d\xcb\xd3\xf5\x57\xf6\x18\x9e\xc1\xb5\x2f\xea\x7c\x7a\xa5\xe6\x84\x26\x74\xe0\x05\x2f\xfc\xf6\xb6\xba\xef\xf4\xe9\x2a\xc4\x69\xc7\x0c\xde\x4b\x68\xce\x2d\x07\x19\x0d\x6b\x46\xe0\xbd\xd7\xed\x02\x4a\x72\x87\x40\x20\x21\x83\x7e\xb1\x51\xde\x75\x1b\xcc\x75\xcb\xb1\xd9\x20\x9a\x6f\x2c\xb2\xd3\x1f\x3d\x43\x26\x56\x2f\xae\xa6\xde\x1d\xf6\xc1\xb2\x7f\x71\x35\x65\xc2\xc8\x17\x57\xd3\xe9\xfd\xf4\x23\xff\xbd\xb8\x9a\x4a\xf1\xe2\x6a\x6a\x0a\x7c\x71\x35\x7d\x71\x75\xdd\x77\xa4\x1f\xf9\xd6\x14\xa8\xb0\x2e\x2d\x15\x6a\x2b\xad\xf5\x6f\x00\x86\xa8\x15\x9a\x34\xf8\x1f\x92\xc9\xda\xcc\x32\x4e\xc4\x5d\xb0\x70\xea\xda\x5c\x0c\x1b\x66\x0a\x5f\xbe\xb5\x5c\xda\xda\x0d\x2a\xa2\x6d\xf5\x6a\x35\x76\x08\x6a\x6e\x06\x34\x8c\x75\xad\x94\xac\x85\xcd\x19\x60\xf7\xec\xc0\x2a\x46\x06\x4a\x62\x0d\x33\x89\x92\x4c\xc5\x8b\x37\xb2\xda\x86\x8e\x89\x5b\x7e\x64\x46\x5d\x57\x95\x54\x26\xea\x9b\x93\xd8\xae\x80\xa3\x8e\x6f\xa7\x2f\x6f\x5f\x3d\xa9\xbe\x86\x9f\x7e\xfc\x0f\xb7\x87\x4e\x43\x92\xc9\x35\x82\xaf\x70\x33\x79\x0f\x44\x50\x58\x32\x85\x40\x36\x64\xfb\x55\x12\x53\xea\xa1\xf3\xa5\x50\xbc\x24\x39\x66\x52\xde\xfd\xbf\x84\xf1\xdf\x1a\xe5\x2e\xa0\xaa\x33\xce\x74\x01\x04\x04\x6e\x20\xd1\x46\x49\xb1\x5a\xb8\xd1\xdc\x36\x6c\xee\x15\x2a\xa9\xcd\x53\x70\xc0\x32\x43\x4a\x4f\x00\xe2\x4b\xe1\x61\xb3\xd9\x44\xad\x45\x1d\x18\x0a\xe4\x55\x9c\xcb\xb2\xac\x05\x33\xdb\xd8\x87\x95\x14\xf1\x37\x8c\xa6\x57\xb7\x57\xaf\x5e\x5d\xdd\xfc\xeb\xed\xcb\x97\x57\xb7\x37\x2f\x1f\x43\x8a\xdd\xd4\x17\x02\x8a\x2f\x3e\xbf\x93\xb6\xb7\xdb\xed\x86\xbe\x73\x38\x6a\x2b\x1f\x9b\xe0\xa8\xad\xe0\x55\xf0\x87\xb1\x55\x0b\x9b\xc6\x43\xc2\x4f\x66\xe0\x3f\x80\x2e\x07\xaf\x27\x34\xfc\x4c\xc8\xb5\xb0\xb2\x08\x92\xb5\xb1\x3b\x6d\x5b\x60\x26\x45\x07\xb3\x0b\xd0\x36\x5b\x6d\x21\xdf\xa3\xe1\x34\xde\x1e\x75\xd6\xef\xc2\xed\xd0\x9d\x1e\x7c\x2e\x51\x96\x92\xa2\x4d\x8d\xba\xd6\x39\x56\xee\x6e\x14\x8c\x84\xbf\x6c\x7f\x23\xc2\x30\x81\x40\x8c\x21\xf9\x9d\x8e\xe0\x7b\xc1\xb7\x50\x6b\x84\xa5\x54\x40\x31\xab\x57\x2b\x97\x4b\x15\x54\x8a\xad\x89\xc1\x36\x85\xea\x1e\x5a\x0e\xc0\xe2\xfa\x84\x61\x6e\x8d\x29\x3f\x91\xc4\xff\x21\x6b\xc8\x89\x00\xa3\x48\x7e\xe7\x23\xab\x56\xca\x46\x56\x85\x7e\x97\x6d\x71\x0d\x19\x72\xb9\x71\x24\xde\x1e\x4b\x86\x9c\xda\x3d\x68\x44\x28\xe4\x06\xca\x3a\x77\x01\x0c\x05\x59\xbb\xcd\x6d\x08\x33\x50\x0b\xc3\xb8\xb7\xb3\xa9\x95\x80\x5c\x96\xa8\x4f\x65\xff\xa3\x0e\x2b\xc1\x72\xf1\xbe\xc0\x13\x75\x45\xd7\x1b\x81\xc2\x37\x9e\x1c\x2a\x25\x0d\xe6\xd6\xe1\x40\x56\x84\x09\x6d\x3d\x66\xac\x24\x2c\x17\x27\x6d\xe2\x8b\xab\x83\xb1\xde\x50\xbf\x10\x6b\x1e\xf6\x77\x81\xae\x3a\x8b\x63\xf8\x3b\x97\x19\xe1\xb0\xb6\x51\x92\x71\x5b\x35\x49\x28\xa4\x35\x4b\xcf\x92\xda\x10\x53\x6b\x90\x4b\x37\xea\x77\x63\xd7\xaf\x89\xb2\x5e\xc7\xb2\x32\x90\x36\x37\x59\x76\x4c\xa3\x5a\x37\xf7\x73\xf6\xd5\xf6\xcc\x07\xf3\x9d\x47\x52\xf8\xf9\x97\xf9\xb3\x46\x95\xbf\xe2\xd2\xc1\xc8\xc6\x84\x37\x83\x29\x88\x81\x5c\x21\x31\xa8\x21\xe7\x52\xd7\xca\x6b\x68\x1b\x7f\xb0\x5a\xb6\x9c\x5a\xce\x76\xa2\x72\xd2\x5a\x26\xe3\x82\xe8\x62\xd2\x5c\xc4\x29\x74\x1e\xec\xe6\xda\xf1\x33\x8b\xd4\xb1\x65\xc0\xd2\xe9\x1c\x58\xd2\xf2\x8d\x38\x8a\x95\x29\xe6\xc0\xce\xcf\x3b\xe2\x33\xb6\x84\x71\x4b\xf1\x33\xfb\x25\x32\xf7\x91\x95\x02\x69\x0a\x7d\x69\x4e\x60\xc3\x47\x57\x9c\xe5\x38\x66\x17\x70\x39\x99\xb7\xb3\x99\x42\x72\xd7\xbe\x35\x7d\xb1\xff\xcf\xfd\xdd\xcd\x0f\x2d\xe3\x8c\x7f\x60\x1b\xdf\x75\x6b\x20\xb0\x62\xda\x40\xad\x38\x34\x71\xef\x5d\xd0\x39\xc4\xd1\xf5\xad\x72\x84\xd5\xe6\xa1\xc1\x59\xbb\x85\x5c\x0a\x2d\x39\x46\x5c\xae\xc6\x37\xd7\x37\x13\x37\xe8\x79\x47\x1a\x05\x1d\xff\xfb\xbb\xef\xbf\x8b\xb4\x51\x4c\xac\xd8\x72\x3b\x7e\xa8\x15\x9f\xc1\xf3\x71\xf0\x2f\xb5\xe2\xc1\xe4\xe7\xe9\x2f\xd1\x9a\xf0\x1a\x2f\x1c\x08\x66\xee\xef\x91\xe8\x0b\x68\x1e\x67\x70\xa8\xc5\x6e\x32\x99\x9f\xbe\xb6\xe8\xdd\xb2\x28\xd4\x68\xc6\x96\xb0\xbb\x5d\x18\x1a\x8e\x40\x89\xa6\x90\x2e\xd6\x15\xe6\x52\x08\xcc\x0d\xd4\x95\x14\x8d\x9d\x80\x4b\xad\xf7\xe8\x6c\x29\xd2\x63\xa4\x34\xf4\xa9\xab\x06\xfe\x0b\xb3\x77\x32\xbf\x43\x33\x1e\x8f\x37\x4c\x50\xb9\x89\xb8\xf4\x67\x76\x64\xa3\x59\xe6\x92\x43\x9a\xa6\xd0\xa4\xe9\x60\x02\xdf\x40\xb0\xd1\x36\x61\x07\x30\xb3\x8f\xf6\x69\x02\xe7\x30\x5c\x5e\xd8\x82\xe2\x1c\x82\x98\x54\x2c\x98\xf8\x18\x69\x0d\x2f\x45\x89\x5a\x93\x15\xf6\x15\xc4\x35\x0a\xd3\x21\xcf\xee\xa3\xd4\x2b\x48\xc1\x39\xa8\x22\x4a\xa3\x27\x89\x6c\x73\xdc\x42\xd0\x02\xd9\x91\xa5\x29\x88\x9a\xf3\x3d\x72\x7d\xa4\xcc\x5b\x4c\x1e\x90\x47\x3e\x69\x7d\x95\xa6\x60\x5b\x45\x6b\x62\xba\x5f\x69\x9d\xef\x7b\xda\x49\x64\x13\xcc\x7e\xc5\x64\xde\x87\xf8\x01\x37\xa4\xbf\xc7\x0e\xe9\x90\x1f\xd2\x47\x18\xba\x2b\x84\xa7\xf8\xf9\x2b\x87\x1e\x3b\x37\xf0\x08\x37\x51\x97\x19\xaa\xa7\xd8\xf9\x2b\x84\x86\x9d\x33\xf5\x5b\x61\x7a\x6b\x2f\xe0\xf2\xd5\xe4\x11\xee\xa8\x94\x7c\x94\xb9\x90\x66\x3b\x7e\xe0\x64\x6b\x8b\x32\x18\x19\x59\xbd\x71\x2d\xff\xe8\xc2\xa5\xee\x19\x74\x1c\x2e\xdc\x4d\xee\x0c\x46\xee\xcd\xce\xb3\x12\xdd\xaa\x97\xd3\xe9\xf4\x02\xda\x1f\x3d\xfe\x42\x6c\x10\xaa\x1a\x77\x8f\xe8\xa3\xeb\x3c\xb7\x05\xc4\xe7\x68\xd4\xf0\xe8\x74\x6a\xde\x3f\x43\xab\x2e\x61\x1c\xa8\x05\x7f\xfa\x13\x1c\xcd\x1e\xc2\x38\x8e\xe1\x3f\x89\xba\x03\x77\xbd\xa7\x70\xcd\x64\xad\xf7\xe9\xa7\x64\x5a\xdb\x6c\x4c\x34\x50\x29\xb0\x59\xf3\x69\xb9\xe0\x48\xc7\x86\x0c\x16\x30\x1d\x2a\x68\x8f\xc3\x5e\xae\x38\x91\x42\x7a\x7c\x0f\xb3\x43\x6b\x91\x13\xc9\x87\x95\x08\x5f\xa5\x10\x04\xfd\xc5\x47\x14\x96\xa0\x63\x76\xa6\xd1\xbc\xf7\xbe\x18\x37\x29\xf3\x54\x42\x9b\x5c\xc0\xf5\x74\x3a\x9d\x1c\x29\xb1\xdb\x9b\xf7\x75\x65\xeb\x2c\x20\x62\xeb\x8e\xc4\xce\xb6\xae\x02\xb5\x35\x93\x3d\xd2\x38\xe4\x92\x73\x5f\xdc\x34\x4b\xad\x81\x6d\x7b\x22\x05\xa4\x10\x5e\xce\x4f\xa4\xd6\x9e\x25\x7b\x5b\x1b\xba\xe7\x84\xed\x87\x2e\x3a\xb4\xd9\x80\x38\xbc\x3c\x70\xca\x81\xbf\x4e\x3b\xe6\xac\xd3\x9b\xed\x2d\x3a\x70\xd7\xde\x5f\x43\x9b\xf5\xf4\xf7\x7c\xce\x2f\x3f\x72\x1b\xdd\x74\x55\xeb\x62\x3c\x50\x74\x32\x3f\xf6\xcd\x5b\x83\xca\x96\xdb\xd2\xa6\x2c\xeb\x0b\xdb\x53\x28\x3c\x72\x89\xab\xf9\x15\x86\x0a\x05\x45\xd5\xd6\x19\xbe\x45\xb0\x55\xe1\x81\xcb\x7c\xdb\xda\x87\xd3\x27\x06\x8c\xab\xd3\xa4\x40\x00\x80\x41\x10\x38\xa0\x1e\x20\xd5\x12\x23\x27\x95\x46\x0a\x29\xf8\xdf\xa0\xc7\x93\xa8\x16\xec\x7e\x3c\x09\x9b\xf7\x21\x8f\x76\xbe\x49\x9b\xbe\x8e\x71\x6a\x9f\xa7\x10\x24\x46\x01\xa3\xe9\x28\x80\xf3\x53\x21\x68\xb3\xee\x68\xb1\xd7\xa0\xbf\x14\x20\x31\x74\xe1\xee\x22\x7d\xe3\xf7\xcf\x20\x23\xf9\xdd\xca\x75\x54\x33\x5b\x7f\x8d\x8f\xd8\x92\x35\x31\x44\x39\xae\x93\x39\xec\xc9\x9b\xce\x33\xb7\xce\x99\x83\x6f\x71\xdd\xd5\x27\x74\xbf\x18\xb8\xb7\x4c\x2a\x8a\x2a\x54\x84\xb2\x5a\xcf\xe0\xa6\xba\x9f\xff\xb3\xfd\x45\xc5\x5d\xd2\x3e\xa9\x6a\xa5\x70\x71\xa4\x51\x9e\xbb\xdf\xc4\xce\x21\x48\x62\x4b\xf0\x7b\x6c\xba\xcd\xf6\x7f\xfb\x86\x13\x57\xd1\xd0\xfd\x32\xdd\x8c\x97\x8c\x52\x8e\x56\xe1\x3d\x7b\x1b\x8c\xd6\xff\xfd\x90\x3a\x14\x09\xcd\x1d\xf4\x7e\xcd\x0e\x90\x6b\x7c\x62\x41\x77\x9d\x3d\xb2\x00\x08\xed\x96\x99\xb3\x79\xd3\xb5\xbb\x61\x35\x72\xb6\x68\xbe\x64\xa0\xb5\x72\xb5\xd6\x38\x6c\x00\x76\x01\x23\x6d\x6b\x3f\xaa\x47\x93\xa8\xa8\x4b\x22\xd8\x6f\x38\xb6\x79\x69\xe2\x6d\xe5\xee\xc7\x83\xe3\x23\xf9\x48\x99\xfd\x65\xf5\xa8\xcd\x71\xa3\xc6\x88\xa3\xd6\xbb\x37\xfb\x4b\x82\x19\x4c\xe7\xa3\x4f\xb4\xd0\x69\x29\x61\x46\x14\xf4\x5f\xc2\x36\xf9\x82\x92\x56\x7a\x3b\x97\x11\x35\xf2\x57\x23\xae\x3e\x17\x72\x93\x8e\xae\xa7\x9d\x92\xde\xd1\xce\xcf\xa3\x06\x6b\x47\xce\xb0\x5a\xb6\xa1\xb9\x80\xeb\xe9\x97\xd0\xd6\x5f\xab\x0c\x76\x60\x14\xab\x90\x02\xc9\x0d\x5b\xe3\xff\xc1\x46\xbe\x80\x91\x3f\x59\x45\x8b\xc3\xd6\x78\x0e\xa6\x07\xfa\xda\xd9\xce\xb6\x5f\xdb\x78\x83\xd8\x59\xf8\x1c\x82\x93\x1b\x79\x14\x89\x03\xc2\x41\x68\x3f\x1e\xf7\xee\x07\x9f\x60\x98\x53\x6c\xb5\xdb\xfd\x56\x39\x89\x0a\x53\xf2\x71\x90\x18\xf7\x8d\x8a\xd5\xb9\xe3\xe0\x18\xf8\xe1\xc3\x92\x6e\x77\xd8\xc8\xd8\xa6\x1e\x07\x7d\x16\xf4\x8a\x93\xae\x17\x6b\x2b\x11\xd8\xed\x3f\xe5\x89\x63\x78\x67\x88\x32\x40\xe0\xa7\xb7\x50\x57\x94\x18\x9b\xbd\x24\xd8\xfc\xe8\xb2\x58\xf7\xad\x4f\x46\x94\x86\xa5\x54\x1b\xa2\x68\x73\xa1\x63\x0a\xdc\x02\x51\xd8\x95\x7e\x1a\xcd\x5b\x7b\x8a\xad\x09\x1f\x1f\xf5\x7d\xcf\xc7\xa3\xa8\xef\xf2\xd1\x24\x42\x92\x17\xc7\x84\x2e\x63\x75\x72\x53\xf8\xce\xb5\x00\xe3\xe7\x63\x53\x30\x3d\x89\x88\x31\x6a\x3c\x3a\x00\xc3\x68\x62\xfd\x7a\xd9\x6b\xc9\xba\xe5\xc9\x41\x58\x3d\xc5\x63\x5f\x4c\x77\x85\x40\x4b\x9e\x6b\x3d\xf6\xb8\x1a\x5d\xf4\x78\x1f\xc2\x6a\xf4\x62\xd4\x39\x6a\x1f\xde\xfb\x7d\xa4\x27\x35\x39\x60\x3d\xb2\x51\x36\x3a\x12\x4f\x28\x7d\x63\xe3\x67\x1c\x9c\x88\xf4\x21\x3a\x26\x9d\xb1\xfd\x79\xfd\xa4\x95\xfd\x57\x12\x8f\x98\x98\xd1\xd1\x24\xd2\x75\xe6\xef\x26\xc6\x2f\xbb\x06\xac\x25\x73\xe0\x1d\xa6\x82\xa3\x82\xc2\x8a\x38\x2c\x2a\xc2\x41\x11\xf2\x44\xd6\x68\x44\xfa\x5d\xed\x2e\xac\xc1\xa7\x93\xee\xbe\xeb\x5b\x6d\x8b\x2b\xff\xdb\xc2\x06\x33\xed\x6e\x12\xa0\xc1\xbb\xbb\xe2\xf1\x57\x39\xaf\x7f\x78\xdb\xbb\xce\xe9\x22\x62\xec\xb8\x77\x9f\xe1\x9d\xba\x27\x39\xf9\xdd\xdf\x66\xb3\x89\x56\x52\xae\xb8\xff\xe2\xaf\xbb\x48\x89\x49\xc5\xa2\x0f\x3a\x00\xa2\xb7\x22\x07\x8a\x4b\x54\x8b\x1e\xfb\xe6\x76\x25\x89\xfd\x17\x69\x49\xec\x3f\xba\xfd\xdf\x00\x00\x00\xff\xff\x60\x0b\x2c\x3c\x85\x2b\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": &bintree{faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
