// Code generated by go-bindata.
// sources:
// faucet.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\xef\x92\xdb\x36\x92\xff\x3c\x7e\x8a\x0e\xcf\xb3\x92\x32\x43\x52\xf3\xc7\xde\x39\x89\x54\x2a\xeb\xcd\xee\xf9\xea\x2e\x49\x25\x4e\xdd\x6d\x65\x53\x57\x20\xd1\x12\xe1\x01\x01\x06\x00\xa5\x51\xa6\xf4\xee\x57\x00\x48\x8a\xa2\x34\x13\x3b\xf6\x55\x9d\x3f\x8c\x49\xa0\xd1\xdd\xe8\xfe\x35\xba\x1b\x62\xf2\xc5\x5f\xbf\x7b\xf3\xee\x1f\xdf\x7f\x03\x85\x29\xf9\xe2\x45\x62\xff\x03\x4e\xc4\x2a\x0d\x50\x04\x8b\x17\x67\x49\x81\x84\x2e\x5e\x9c\x9d\x25\x25\x1a\x02\x79\x41\x94\x46\x93\x06\xb5\x59\x86\x77\xc1\x7e\xa2\x30\xa6\x0a\xf1\xd7\x9a\xad\xd3\xe0\xbf\xc3\x9f\xbe\x0e\xdf\xc8\xb2\x22\x86\x65\x1c\x03\xc8\xa5\x30\x28\x4c\x1a\xbc\xfd\x26\x45\xba\xc2\xde\x3a\x41\x4a\x4c\x83\x35\xc3\x4d\x25\x95\xe9\x91\x6e\x18\x35\x45\x4a\x71\xcd\x72\x0c\xdd\xcb\x25\x30\xc1\x0c\x23\x3c\xd4\x39\xe1\x98\x5e\x05\x8b\x17\x96\x8f\x61\x86\xe3\xe2\xf1\x31\xfa\x16\xcd\x46\xaa\xfb\xdd\x6e\x06\x5f\xd7\xa6\x40\x61\x58\x4e\x0c\x52\xf8\x1b\xa9\x73\x34\x49\xec\x29\xdd\x22\xce\xc4\x3d\x14\x0a\x97\x69\x60\x55\xd7\xb3\x38\xce\xa9\x78\xaf\xa3\x9c\xcb\x9a\x2e\x39\x51\x18\xe5\xb2\x8c\xc9\x7b\xf2\x10\x73\x96\xe9\xd8\x6c\x98\x31\xa8\xc2\x4c\x4a\xa3\x8d\x22\x55\x7c\x13\xdd\x44\x7f\x8e\x73\xad\xe3\x6e\x2c\x2a\x99\x88\x72\xad\x03\x50\xc8\xd3\x40\x9b\x2d\x47\x5d\x20\x9a\x00\xe2\xc5\x1f\x93\xbb\x94\xc2\x84\x64\x83\x5a\x96\x18\xdf\x46\x7f\x8e\xa6\x4e\x64\x7f\xf8\x79\xa9\x56\xac\xce\x15\xab\x0c\x68\x95\x7f\xb0\xdc\xf7\xbf\xd6\xa8\xb6\xf1\x4d\x74\x15\x5d\x35\x2f\x4e\xce\x7b\x1d\x2c\x92\xd8\x33\x5c\x7c\x12\xef\x50\x48\xb3\x8d\xaf\xa3\xdb\xe8\x2a\xae\x48\x7e\x4f\x56\x48\x5b\x49\x76\x2a\x6a\x07\x3f\x9b\xdc\xa7\x7c\xf8\x7e\xe8\xc2\xcf\x21\xac\x94\x25\x0a\x13\xbd\xd7\xf1\x75\x74\x75\x17\x4d\xdb\x81\x63\xfe\x4e\x80\x75\x9a\x15\x75\x16\xad\x51\x59\xe4\xf2\x30\x47\x61\x50\xc1\xa3\x1d\x3d\x2b\x99\x08\x0b\x64\xab\xc2\xcc\xe0\x6a\x3a\x3d\x9f\x9f\x1a\x5d\x17\x7e\x98\x32\x5d\x71\xb2\x9d\xc1\x92\xe3\x83\x1f\x22\x9c\xad\x44\xc8\x0c\x96\x7a\x06\x9e\xb3\x9b\xd8\x39\x99\x95\x92\x2b\x85\x5a\x37\xc2\x2a\xa9\x99\x61\x52\xcc\x2c\xa2\x88\x61\x6b\x3c\x45\xab\x2b\x22\x8e\x16\x90\x4c\x4b\x5e\x1b\x1c\x28\x92\x71\x99\xdf\xfb\x31\x17\xcd\xfd\x4d\xe4\x92\x4b\x35\x83\x4d\xc1\x9a\x65\xe0\x04\x41\xa5\xb0\x61\x0f\x15\xa1\x94\x89\xd5\x0c\x5e\x57\xcd\x7e\xa0\x24\x6a\xc5\xc4\x0c\xa6\xfb\x25\x49\xdc\x9a\x31\x89\xfd\xc1\xf5\xe2\x2c\xc9\x24\xdd\x3a\x1f\x52\xb6\x86\x9c\x13\xad\xd3\x60\x60\x62\x77\x20\x1d\x10\xd8\x73\x88\x30\xd1\x4e\x1d\xcc\x29\xb9\x09\xc0\x09\x4a\x03\xaf\x44\x98\x49\x63\x64\x39\x83\x2b\xab\x5e\xb3\x64\xc0\x8f\x87\x7c\x15\x5e\x5d\xb7\x93\x67\x49\x71\xd5\x32\x31\xf8\x60\x42\xe7\x9f\xce\x33\xc1\x22\x61\xed\xda\x25\x81\x25\x09\x33\x62\x8a\x00\x88\x62\x24\x2c\x18\xa5\x28\xd2\xc0\xa8\x1a\x2d\x8e\xd8\x02\xfa\xc7\xdf\x13\xa7\x5f\x71\xd5\xea\x15\x53\xb6\x6e\xb6\xd5\x7b\x1c\xec\xf0\xe9\x4d\xdc\x41\xf3\x20\x97\x4b\x8d\x26\xec\xed\xa9\x47\xcc\x44\x55\x9b\x70\xa5\x64\x5d\x75\xf3\x67\x89\x1b\x05\x46\xd3\xa0\x56\x3c\x68\x8e\x7f\xf7\x68\xb6\x55\x63\x8a\xa0\xdb\xb8\x54\x65\x68\x3d\xa1\x24\x0f\xa0\xe2\x24\xc7\x42\x72\x8a\x2a\x0d\xbe\xe7\x48\x34\x82\x0f\x90\xad\xac\x15\xfc\xc8\xca\x8a\x63\x5e\x10\x26\x80\x50\x6a\x01\x1a\x45\x51\x4f\xb4\x43\xeb\xb1\x72\x61\x66\xc4\x9e\xea\x2c\xc9\x6a\x63\x64\x47\x98\x19\x01\x99\x11\x21\xc5\x25\xa9\xb9\x01\xaa\x64\x45\xe5\x46\x84\x46\xae\x56\x36\xb7\x79\xb5\xfd\xa2\x00\x28\x31\xa4\x99\x4a\x83\x96\xb6\xf5\x1a\xd1\x95\xac\xea\xaa\xf1\x9b\x1f\xc4\x87\x8a\x08\x8a\xd4\x7a\x99\x6b\x0c\x16\x7f\x67\x6b\x84\x12\xe1\x1b\x53\xa0\x3a\x1b\x82\x20\x27\x0a\x4d\xd8\x67\x7a\x04\x85\x24\xf6\xca\xf8\x2d\x41\xf3\x2f\xa9\x79\xcb\xa9\xdb\x42\x89\xa2\x86\x83\xb7\x50\xd9\x93\x24\x58\x3c\x3e\x2a\x22\x56\x08\x2f\x19\x7d\xb8\x84\x97\xa4\x94\xb5\x30\x30\x4b\x21\xfa\xda\x3d\xea\xdd\xee\x80\x3b\x40\xc2\xd9\x22\x21\xcf\x01\x1a\xa4\xc8\x39\xcb\xef\xd3\xc0\x30\x54\xe9\xe3\xa3\x65\xbe\xdb\xcd\xe1\xf1\x91\x2d\xe1\x65\xf4\x03\xe6\xa4\x32\x79\x41\x76\xbb\x95\x6a\x9f\x23\x7c\xc0\xbc\x36\x38\x9e\x3c\x3e\x22\xd7\xb8\xdb\xe9\x3a\x2b\x99\x19\xb7\xcb\xed\xb8\xa0\xbb\x9d\xd5\xb9\xd1\x73\xb7\x83\xd8\x32\x15\x14\x1f\xe0\x65\xf4\x3d\x2a\x26\xa9\x06\x4f\x9f\xc4\x64\x91\xc4\x9c\x2d\x9a\x75\x87\x46\x8a\x6b\xbe\xc7\x4b\x6c\x01\xd3\x21\xdb\x05\x8a\x53\xb5\xaf\xe9\x09\xdc\xaf\xc2\x4e\xfb\x06\x0f\x9a\x19\xbc\xc7\x6d\x1a\x3c\x3e\xf6\xd7\x36\xb3\x39\xe1\x3c\x23\xd6\x2e\x7e\x6b\xdd\xa2\xdf\xd0\xe2\x74\xcd\xb4\x2b\xa2\x16\xad\x06\x7b\xb5\x3f\x30\x90\x07\x47\x95\x91\xd5\x0c\x6e\xae\x7b\xe7\xd4\xa9\x18\x7f\x3d\x88\xf1\x9b\x93\xc4\x15\x11\xc8\xc1\xfd\x0d\x75\x49\x78\xfb\xdc\x44\x4b\x2f\xf8\x86\x8b\x42\x7b\x2a\x77\xaa\x75\xa7\xfb\x74\x0e\x72\x8d\x6a\xc9\xe5\x66\x06\xa4\x36\x72\x0e\x25\x79\xe8\x32\xdc\xcd\x74\xda\xd7\xdb\x16\x7f\x24\xe3\xe8\xce\x13\x85\xbf\xd6\xa8\x8d\xee\x4e\x0f\x3f\xe5\xfe\xda\x43\x84\xa2\xd0\x48\x07\xd6\xb0\x12\xad\x69\x1d\x55\xcf\xf5\x9d\x31\x4f\xea\xbe\x94\xb2\x4b\x1a\x7d\x35\x1a\xd6\xbd\xfc\x16\x2c\x12\xa3\xf6\x74\x67\x89\xa1\x1f\x75\xe8\x2b\x5b\xd4\x3d\x75\xe6\xfb\x13\xcd\xee\xbd\x42\x54\xbe\xa2\xb0\x90\x05\xf7\x9a\xc4\x86\x7e\x82\x64\x0b\xc2\x8c\x68\xfc\x10\xf1\x2e\xb7\xef\xc5\xbb\xd7\x4f\x95\x5f\x20\x51\x26\x43\x62\x3e\x44\x81\x65\x2d\x68\x6f\xff\xee\xec\xfc\x54\x05\x6a\xc1\xd6\xa8\x34\x33\xdb\x0f\xd5\x00\xe9\x5e\x05\xff\x7e\xa8\x42\x12\x1b\xf5\x3c\xd6\xfa\x2f\xc7\xc1\xfd\xf8\x18\x7f\xf9\x91\x01\xfe\x65\xbc\xdb\x75\xeb\x9e\x2a\x48\x0e\x89\xce\x92\xe2\x66\xf1\x6f\x72\x03\x54\xa2\x06\x53\x30\x0d\xb6\xac\xf8\x2a\x89\x8b\x9b\x23\xd2\x6a\xf1\xce\x12\xf4\x73\xef\xd2\x95\x1b\xc0\x34\xa8\x5a\x08\x26\x56\x20\x05\x98\x02\x0f\x4b\x14\xe1\x9f\xa2\x24\xae\x8e\x98\xd2\x7d\xaa\xe2\x61\x21\x15\xfb\xcd\x16\x63\xfc\x48\xd1\xb3\x84\x9a\x41\xcc\xb5\x47\x86\x33\x04\xc7\xa5\x99\xc1\xad\x3f\x32\x86\xee\x6d\x5a\x81\x53\xbe\x6d\x79\xba\x16\xcb\x9e\xc3\x33\xb8\xf1\x75\x9d\xcf\xaf\xd4\x9c\xd0\x84\x0e\xbc\xe0\x85\xdf\xdd\x55\x0f\x9d\x3e\x5d\x91\x38\xed\x98\xc1\x3b\x09\xcd\xc1\xe5\x20\xa3\x61\xcd\x08\xbc\xf3\xba\x5d\x42\x49\xee\x11\x08\x24\x64\xd0\x32\x36\xca\xbb\x86\x83\xb9\x86\x39\x36\x1b\x44\xf3\x95\x45\x76\xfa\x83\x67\xc8\xc4\xea\xfc\x7a\xea\xdd\x61\x1f\x2c\xfb\xf3\xeb\x29\x13\x46\x9e\x5f\x4f\xa7\x0f\xd3\x0f\xfc\x77\x7e\x3d\x95\xe2\xfc\x7a\x6a\x0a\x3c\xbf\x9e\x9e\x5f\xdf\xf4\x1d\xe9\x47\x5c\xc0\x61\x5d\x5a\x2a\xd4\x56\x5a\xeb\xdf\x00\x0c\x51\x2b\x34\x69\xf0\x3f\x24\x93\xb5\x99\x65\x9c\x88\xfb\x60\xe1\xd4\xb5\xc9\x18\x36\xcc\x14\xbe\x82\x6b\xb9\xb4\xe5\x1b\x54\x44\xdb\x02\xd6\x6a\xec\x10\xd4\x5c\x0e\x68\x18\xeb\x5a\x29\x59\x0b\x9b\x34\xc0\xee\xd9\x81\x55\x8c\x0c\x94\xc4\x1a\x66\x12\x25\x99\x8a\x17\x6f\x64\xb5\x0d\x1d\x13\xb7\xfc\xc8\x8c\xba\xae\x2a\xa9\x4c\xd4\x37\x27\xb1\x8d\x01\x47\x1d\xdf\x4d\x5f\xdd\xbd\x7e\x56\x7d\x0d\x3f\xfd\xf0\x1f\x6e\x0f\x9d\x86\x24\x93\x6b\x04\x5f\xe4\x66\xf2\x01\x88\xa0\xb0\x64\x0a\x81\x6c\xc8\xf6\x8b\x24\xa6\xd4\x43\xe7\x73\xa1\x78\x49\x72\xcc\xa4\xbc\xff\x7f\x09\xe3\xbf\x35\xca\x5d\x42\x55\x67\x9c\xe9\x02\x08\x08\xdc\x40\xa2\x8d\x92\x62\xb5\x70\xa3\xb9\xed\xd9\xdc\x2b\x54\x52\x9b\xe7\xe0\x80\x65\x86\x94\x9e\x00\xc4\xe7\xc2\xc3\x66\xb3\x89\x5a\x8b\x3a\x30\x14\xc8\xab\x38\x97\x65\x59\x0b\x66\xb6\xb1\x0f\x2b\x29\xe2\xaf\x18\x4d\xaf\xef\xae\x5f\xbf\xbe\xbe\xfd\xd7\xbb\x57\xaf\xae\xef\x6e\x5f\x3d\x85\x14\xbb\xa9\xcf\x04\x14\x5f\x7d\x7e\x2b\x6d\x7b\xb7\xdb\x0d\x7d\xe7\x70\xd4\x96\x3e\x36\xc1\x51\x5b\xc2\xab\xe0\x0f\x63\xab\x16\x36\x8f\x87\x84\x9f\x4c\xc1\x7f\x00\x5d\x0e\x5e\xcf\x68\xf8\x89\x90\x6b\x61\x65\x11\x24\x6b\x63\x77\xda\x76\xc1\x4c\x8a\x0e\x66\x97\xa0\x6d\xb6\xda\x42\xbe\x47\xc3\x69\xbc\x3d\xe9\xac\xdf\x85\xdb\xa1\x3b\x3d\xf8\x5c\xa2\x2c\x25\x45\x9b\x1a\x75\xad\x73\xac\xdc\xf5\x28\x18\x09\x7f\xd9\xfe\x46\x84\x61\x02\x81\x18\x43\xf2\x7b\x1d\xc1\x77\x82\x6f\xa1\xd6\x08\x4b\xa9\x80\x62\x56\xaf\x56\x2e\x97\x2a\xa8\x14\x5b\x13\x83\x6d\x0a\xd5\x3d\xb4\x1c\x80\xc5\x35\x0a\xc3\xdc\x1a\x53\x7e\x22\x89\xff\x43\xd6\x90\x13\x01\x46\x91\xfc\xde\x47\x56\xad\x94\x8d\xac\x0a\xfd\x2e\xdb\xea\x1a\x32\xe4\x72\xe3\x48\xbc\x3d\x96\x0c\x39\xb5\x7b\xd0\x88\x50\xc8\x0d\x94\x75\xee\x02\x18\x0a\xb2\x76\x9b\xdb\x10\x66\xa0\x16\x86\x71\x6f\x67\x53\x2b\x01\xb9\x2c\x51\x9f\xca\xfe\x47\x2d\x56\x82\xe5\xe2\x5d\x81\x27\xea\x8a\xae\x39\x02\x85\x6f\x3c\x39\x54\x4a\x1a\xcc\xad\xc3\x81\xac\x08\x13\xda\x7a\xcc\x58\x49\x58\x2e\x4e\xda\xc4\x17\x57\x07\x63\xbd\xa1\x7e\x21\xd6\x3c\xec\xaf\x03\x5d\x75\x16\xc7\xf0\x77\x2e\x33\xc2\x61\x6d\xa3\x24\xe3\xb6\x6a\x92\x50\x48\x6b\x96\x9e\x25\xb5\x21\xa6\xd6\x20\x97\x6e\xd4\xef\xc6\xae\x5f\x13\x65\xbd\x8e\x65\x65\x20\x6d\x2e\xb3\xec\x98\x46\xb5\x6e\xae\xe8\xec\xab\x6d\x9a\x0f\xe6\x3b\x8f\xa4\xf0\xf3\x2f\xf3\x17\x8d\x2a\x7f\xc5\xa5\x83\x91\x8d\x09\x6f\x06\x53\x10\x03\xb9\x42\x62\x50\x43\xce\xa5\xae\x95\xd7\xd0\x76\xfe\x60\xb5\x6c\x39\xb5\x9c\xed\x44\xe5\xa4\xb5\x4c\xc6\x05\xd1\xc5\xa4\xb9\x8b\x53\xe8\x3c\xd8\xcd\xb5\xe3\x67\x16\xa9\x63\xcb\x80\xa5\xd3\x39\xb0\xa4\xe5\x1b\x71\x14\x2b\x53\xcc\x81\x5d\x5c\x74\xc4\x67\x6c\x09\xe3\x96\xe2\x67\xf6\x4b\x64\x1e\x22\x2b\x05\xd2\x14\xfa\xd2\x9c\xc0\x86\x8f\xae\x38\xcb\x71\xcc\x2e\xe1\x6a\x32\x6f\x67\x33\x85\xe4\xbe\x7d\x6b\x1a\x63\xff\x9f\xfb\xbb\x9b\x1f\x5a\xc6\x19\xff\xc0\x36\xbe\xed\xd6\x40\x60\xc5\xb4\x81\x5a\x71\x68\xe2\xde\xbb\xa0\x73\x88\xa3\xeb\x5b\xe5\x08\xab\xcd\x43\x83\xb3\x76\x0b\xb9\x14\x5a\x72\x8c\xb8\x5c\x8d\x6f\x6f\x6e\x27\x6e\xd0\xf3\x8e\x34\x0a\x3a\xfe\xf7\x1f\xbf\xfb\x36\xd2\x46\x31\xb1\x62\xcb\xed\xf8\xb1\x56\x7c\x06\x2f\xc7\xc1\xbf\xd4\x8a\x07\x93\x9f\xa7\xbf\x44\x6b\xc2\x6b\xbc\x74\x20\x98\xb9\xbf\x47\xa2\x2f\xa1\x79\x9c\xc1\xa1\x16\xbb\xc9\x64\x7e\xfa\xde\xa2\x77\xcd\xa2\x50\xa3\x19\x5b\xc2\xee\x7a\x61\x68\x38\x02\x25\x9a\x42\xba\x58\x57\x98\x4b\x21\x30\x37\x50\x57\x52\x34\x76\x02\x2e\xb5\xde\xa3\xb3\xa5\x48\x8f\x91\xd2\xd0\xa7\xae\x1a\xf8\x2f\xcc\x7e\x94\xf9\x3d\x9a\xf1\x78\xbc\x61\x82\xca\x4d\xc4\xa5\x3f\xb3\x23\x1b\xcd\x32\x97\x1c\xd2\x34\x85\x26\x4d\x07\x13\xf8\x0a\x82\x8d\xb6\x09\x3b\x80\x99\x7d\xb4\x4f\x13\xb8\x80\xe1\xf2\xc2\x16\x14\x17\x10\xc4\xa4\x62\xc1\xc4\xc7\x48\x6b\x78\x29\x4a\xd4\x9a\xac\xb0\xaf\x20\xae\x51\x98\x0e\x79\x76\x1f\xa5\x5e\x41\x0a\xce\x41\x15\x51\x1a\x3d\x49\x64\xbb\xe3\x16\x82\x16\xc8\x8e\x2c\x4d\x41\xd4\x9c\xef\x91\xeb\x23\x65\xde\x62\xf2\x80\x3c\xf2\x49\xeb\x8b\x34\x05\xdb\x2a\x5a\x13\xd3\xfd\x4a\xeb\x7c\xdf\xd4\x4e\x22\x9b\x60\xf6\x2b\x26\xf3\x3e\xc4\x0f\xb8\x21\xfd\x3d\x76\x48\x87\xfc\x90\x3e\xc1\xd0\xdd\x21\x3c\xc7\xcf\xdf\x39\xf4\xd8\xb9\x81\x27\xb8\x89\xba\xcc\x50\x3d\xc7\xce\xdf\x21\x34\xec\x9c\xa9\xdf\x0a\xd3\x5b\x7b\x09\x57\xaf\x27\x4f\x70\x47\xa5\xe4\x93\xcc\x85\x34\xdb\xf1\x23\x27\x5b\x5b\x94\xc1\xc8\xc8\xea\x8d\x6b\xf9\x47\x97\x2e\x75\xcf\xa0\xe3\x70\xe9\x2e\x73\x67\x30\x72\x6f\x76\x9e\x95\xe8\x56\xbd\x9a\x4e\xa7\x97\xd0\xfe\xee\xf1\x17\x62\x83\x50\xd5\xb8\x7b\x42\x1f\x5d\xe7\xb9\x2d\x20\x3e\x45\xa3\x86\x47\xa7\x53\xf3\xfe\x09\x5a\x75\x09\xe3\x40\x2d\xf8\xd3\x9f\xe0\x68\xf6\x10\xc6\x71\x0c\xff\x49\xd4\x3d\xb8\xfb\x3d\x85\x6b\x26\x6b\xbd\x4f\x3f\x25\xd3\xda\x66\x63\xa2\x81\x4a\x81\xcd\x9a\x8f\xcb\x05\x47\x3a\x36\x64\xb0\x80\xe9\x50\x41\x7b\x1c\xf6\x72\xc5\x89\x14\xd2\xe3\x7b\x98\x1d\x5a\x8b\x9c\x48\x3e\xac\x44\xf8\x22\x85\x20\xe8\x2f\x3e\xa2\xb0\x04\x1d\xb3\x33\x8d\xe6\x9d\xf7\xc5\xb8\x49\x99\xa7\x12\xda\xe4\x12\x6e\xa6\xd3\xe9\xe4\x48\x89\xdd\xde\xbc\x5f\x57\xb6\xce\x02\x22\xb6\xee\x48\xec\x6c\xeb\x2a\x50\x5b\x33\xd9\x23\x8d\x43\x2e\x39\xf7\xc5\x4d\xb3\xd4\x1a\xd8\xb6\x27\x52\x40\x0a\xe1\xd5\xfc\x44\x6a\xed\x59\xb2\xb7\xb5\xa1\x7b\x4e\xd8\x7e\xe8\xa2\x43\x9b\x0d\x88\xc3\xab\x03\xa7\x1c\xf8\xeb\xb4\x63\xce\x3a\xbd\xd9\xde\xa2\x03\x77\xed\xfd\x35\xb4\x59\x4f\x7f\xcf\xe7\xe2\xea\x03\xb7\xd1\x4d\x57\xb5\x2e\xc6\x03\x45\x27\xf3\x63\xdf\xbc\x35\xa8\x6c\xb9\x2d\x6d\xca\xb2\xbe\xb0\x3d\x85\xc2\x23\x97\xb8\x9a\x5f\x61\xa8\x50\x50\x54\x6d\x9d\xe1\x5b\x04\x5b\x15\x1e\xb8\xcc\xb7\xad\x7d\x38\x7d\x64\xc0\xb8\x3a\x4d\x0a\x04\x00\x18\x04\x81\x03\xea\x01\x52\x2d\x31\x72\x52\x69\xa4\x90\x82\xff\x19\x7a\x3c\x89\x6a\xc1\x1e\xc6\x93\xb0\x79\x1f\xf2\x68\xe7\x9b\xb4\xe9\xeb\x18\xa7\xf6\x45\x0a\x41\x62\x14\x30\x9a\x8e\x02\xb8\x38\x15\x82\x36\xeb\x8e\x16\x7b\x0d\xfa\x4b\x01\x12\x43\x17\xee\x2e\xd2\x37\x7e\xff\x0c\x32\x92\xdf\xaf\x5c\x47\x35\xb3\xf5\xd7\xf8\x88\x2d\x59\x13\x43\x94\xe3\x3a\x99\xc3\x9e\xbc\xe9\x3c\x73\xeb\x9c\x39\xf8\x16\xd7\x5d\x7d\x42\xf7\x93\x81\x7b\xcb\xa4\xa2\xa8\x42\x45\x28\xab\xf5\x0c\x6e\xab\x87\xf9\x3f\xdb\x9f\x54\xdc\x25\xed\xb3\xaa\x56\x0a\x17\x47\x1a\xe5\xb9\xfb\x51\xec\x02\x82\x24\xb6\x04\xbf\xc7\xa6\xdb\x6c\xff\xe7\x6f\x38\x71\x15\x0d\xdd\x8f\xd3\xcd\x78\xc9\x28\xe5\x68\x15\xde\xb3\xb7\xc1\x68\xfd\xdf\x0f\xa9\x43\x91\xd0\xdc\x41\xef\xd7\xec\x00\xb9\xc6\x67\x16\x74\xd7\xd9\x23\x0b\x80\xd0\x6e\x99\x39\x9b\x37\x5d\xbb\x1b\x56\x23\x67\x8b\xe6\x63\x06\x5a\x2b\x57\x6b\x8d\xc3\x06\x60\x97\x30\xd2\xb6\xf6\xa3\x7a\x34\x89\x8a\xba\x24\x82\xfd\x86\x63\x9b\x97\x26\xde\x56\xee\x7e\x3c\x38\x3e\x92\x8f\x94\xd9\x5f\x56\x8f\xda\x1c\x37\x6a\x8c\x38\x6a\xbd\x7b\xbb\xbf\x24\x98\xc1\x74\x3e\xfa\x48\x0b\x9d\x96\x12\x66\x44\x41\xff\x25\x6c\x93\x2f\x28\x69\xa5\xb7\x73\x19\x51\x23\x7f\x35\xe2\xea\x73\x21\x37\xe9\xe8\x66\xda\x29\xe9\x1d\xed\xfc\x3c\x6a\xb0\x76\xe4\x0c\xab\x65\x1b\x9a\x0b\xb8\x99\x7e\x0e\x6d\xfd\xb5\xca\x60\x07\x46\xb1\x0a\x29\x90\xdc\xb0\x35\xfe\x1f\x6c\xe4\x33\x18\xf9\xa3\x55\xb4\x38\x6c\x8d\xe7\x60\x7a\xa0\xaf\x9d\xed\x6c\xfb\xa5\x8d\x37\x88\x9d\x85\x2f\x20\x38\xb9\x91\x27\x91\x38\x20\x1c\x84\xf6\xd3\x71\xef\x7e\xf0\x09\x86\x39\xc5\x56\xbb\xdd\x8f\x95\x93\xa8\x30\x25\x1f\x07\x89\x71\x9f\xa9\x58\x9d\x3b\x0e\x8e\x81\x1f\x3e\x2c\xe9\x76\x87\x8d\x8c\x6d\xea\x71\xd0\x67\x41\xaf\x38\xe9\x7a\xb1\xb6\x12\x81\xdd\xfe\x6b\x9e\x38\x86\x1f\x0d\x51\x06\x08\xfc\xf4\x16\xea\x8a\x12\x63\xb3\x97\x04\x9b\x1f\x5d\x16\xeb\x3e\xf7\xc9\x88\xd2\xb0\x94\x6a\x43\x14\x6d\x2e\x74\x4c\x81\x5b\x20\x0a\xbb\xd2\x4f\xa3\x79\x6b\x4f\xb1\x35\xe1\xe3\xa3\xbe\xef\xe5\x78\x14\xf5\x5d\x3e\x9a\x44\x48\xf2\xe2\x98\xd0\x65\xac\x4e\x6e\x0a\xdf\xba\x16\x60\xfc\x72\x6c\x0a\xa6\x27\x11\x31\x46\x8d\x47\x07\x60\x18\x4d\xac\x5f\xaf\x7a\x2d\x59\xb7\x3c\x39\x08\xab\xe7\x78\xec\x8b\xe9\xae\x10\x68\xc9\x73\xad\xc7\x1e\x57\xa3\xcb\x1e\xef\x43\x58\x8d\xce\x47\x9d\xa3\xf6\xe1\xbd\xdf\x47\x7a\x52\x93\x03\xd6\x23\x1b\x65\xa3\x23\xf1\x84\xd2\x37\x36\x7e\xc6\xc1\x89\x48\x1f\xa2\x63\xd2\x19\xdb\x9f\xd7\xcf\x5a\xd9\x7f\x26\xf1\x84\x89\x19\x1d\x4d\x22\x5d\x67\xfe\x6e\x62\xfc\xaa\x6b\xc0\x5a\x32\x07\xde\x61\x2a\x38\x2a\x28\xac\x88\xc3\xa2\x22\x1c\x14\x21\xcf\x64\x8d\x46\xa4\xdf\xd5\xee\xd2\x1a\x7c\x3a\xe9\xee\xbb\xbe\xd1\xb6\xb8\xf2\xbf\x2d\x6c\x30\xd3\xee\x26\x01\x1a\xbc\xbb\x2b\x1e\x7f\x95\xf3\xf5\xf7\x6f\x7b\xd7\x39\x5d\x44\x8c\x1d\xf7\xee\x4b\xbc\x53\xf7\x24\x27\x3f\xfd\xdb\x6c\x36\xd1\x4a\xca\x15\xf7\x1f\xfd\x75\x17\x29\x31\xa9\x58\xf4\x5e\x07\x40\xf4\x56\xe4\x40\x71\x89\x6a\xd1\x63\xdf\xdc\xae\x24\xb1\xff\x28\x2d\x89\xfd\x77\xb7\xff\x1b\x00\x00\xff\xff\x9c\xc9\xdd\x32\x88\x2b\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 11144, mode: os.FileMode(420), modTime: time.Unix(1590025983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": &bintree{faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
